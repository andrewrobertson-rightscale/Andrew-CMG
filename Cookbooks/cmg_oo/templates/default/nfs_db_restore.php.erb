#!/usr/bin/php
<?php
    ini_set('date.timezone', 'America/Detroit');
	define('DEBUG_SCRIPT', false);
	define('BACKUP_SRC_DIR', '/mnt/databases/backups_work');
	define('BACKUP_DST_DIR', '/mnt/databases/backups');
	define('BACKUP_RETAIN_DIR', '/mnt/databases/backups_retain');
	define('DS', '/');

	$databases = array(
		'360tuna',
		'airsoftsociety',
		'arkansashunting',
		'beekeepingforums',
		'bersaforum',
		'caracalforum',
		'catfish1',
		'cattleforum',
		'chickdb',
		'cztalk',
		'dairygoatinfo',
		'db111983_steyr',
		'email_marketer',
		'firearmstalk',
		'foroglock',
		'georgiahunting',
		'georgiapackvb',
		'georgiapacking_gapack',
		'goatspot',
		'helpdesk',
		'hpff_vb',
		'hstoday',
		'iplogging',
		'ktog',
		'marlin',
		'midwesthorse',
		'MWTVB',
		'ohiowaterfowler',
		'otn',
		'paracordforum',
		'performance_schema',
		'pigforum',
		'prepareforum',
		'rabbitdogs',
		'resource_monitor',
		'rugerforum',
		'springfield',
		'theslingshotforum',
		'tractorforum',
		'tul',
		'twospoke',
		'velospace_ddrupal2',
		'velospace_drupal2',
		'xdforum',
		'zipcodes'
	);

    //restore databases
	foreach($databases as $database) {
		$backup_file = "_latest-{$database}.sql.gz";
		restore_mysql_database($database, BACKUP_DST_DIR, $backup_file);
		remove_file(BACKUP_DST_DIR . DS . "_latest-{$database}.sql");
	}



    /**
     * Removes a file using rm -f
     * CAREFUL!
     * @param string $file to remove
     * @return void
     */
    function remove_file($file) {
    	if (file_exists($file)) {
	    	if (DEBUG_SCRIPT) echo "Removing file: {$file}...\n";
			system("rm -f {$file}");
		}
    }



    /**
     * Moves a file using mv
     * @param string $src file to move
     * @param string $dst destination to move to
     * @return void
     */
    function move_file($src, $dst) {
    	if (file_exists($src)) {
	    	if (DEBUG_SCRIPT) echo "Moving file: {$src} to {$dst}...\n";
			system("mv {$src} {$dst}");
		}
    }



    /**
     * Copies a file using cp
     * @param string $src file to copy
     * @param string $dst destination to copy to
     * @return void
     */
    function copy_file($src, $dst) {
    	if (file_exists($src)) {
	    	if (DEBUG_SCRIPT) echo "Copying file: {$src} to {$dst}...\n";
			system("cp {$src} {$dst}");
		}
    }



    /**
     * Removes directory recursively using rm -rf
     * CAREFUL!
     * @param string $dir to remove
     * @return void
     */
    function remove_dir_recursive($dir) {
    	if (is_dir($dir)) {
	    	if (DEBUG_SCRIPT) echo "Removing directory recursively: {$dir}...\n";
		    $cmd = "rm -rf {$dir}";
		    system($cmd);
		}
    }



    /**
     * Creates the directory recursively if it doesn't exist
     * @param string $dir directory to create
     * @return void
     */
    function create_dir_recursive($dir) {
    	if ($dir == '.' || $dir == '..') {
    		return;
    	}
    	if (!is_dir($dir)) {
	    	if (DEBUG_SCRIPT) echo "Creating directory recursively: {$dir}...\n";
    		mkdir($dir, 0755, true);
    	}
    }



    /**
     * Restores a MySQL database
     * @param string $dbname database to restore
     * @param string $dir destination directory where backup exists
     * @param string $file destination filename for backup
     * @return int error level of executing mysql import
     */
    function restore_mysql_database($dbname, $dir, $file) {
    	if (DEBUG_SCRIPT) echo "Restoring {$dbname} from: {$dir}/{$file}...\n";
    	if (DEBUG_SCRIPT) $cmd = "touch \"{$dir}/{$file}\"";
        else $cmd = "mysql -uroot < \"{$dir}/{$file}\"";
    	$ret_val = 0;
    	system($cmd, $ret_val);
    	return $ret_val;
    }
?>